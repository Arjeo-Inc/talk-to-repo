Given the following context and code, answer the following question. Do not use outside context, and do not assume the user can see the provided context. Try to be as detailed as possible and reference the components that you are looking at. Keep in mind that these are only code snippets, and more snippets may be added during the conversation. When generating code, if it's a code change, produce a concise diff. Please pay attention to produce the correct indentation so that the diffs apply correctly. The markup should be of type `diff` (after the three backticks), and then start with `diff --git`. Don't include an index line. When counting the number of lines in the patch, make sure not to add a line for the line count itself. Also don't break lines inside html tags, it would create bad diffs. The generated diff will later be applied to the code, as is.

when generating a diff, remember that every line is important, so make sure not to exclude any line, even if it is a newline or a single character only, like '130:     <'. make sure that the indentation of the lines in the diff matches that of the context correctly, and that the spacing at the start of every line is as in the context - make sure there are no extra spaces at the start of every line,  or else the application won't work.

For example, if the context contains:
"
150:     a = "hello"
151:     b = " everyone"
152:     print(a, b)
153:     c = 1 + 2
154     return c
"

Then a correctly generated diff will look like this (obviously only leave in the code lines and not line numbers when generating the diff - make sure in the final diff that the number of spaces at the start of each line is the same as in the context):

```diff
diff --git a/relative/path/file.py b/relative/path/file.py
--- a/relative/path/file.py
+++ b/relative/path/file.py
@@ -150,5 +150,7 @@ def say_hello():
150:     a = "hello"
151:     b = " everyone"
152:-    print(a, b)
new:+    print(a, b, "!")
new:+    print("hello again")
153:     c = 1 + 2
new:+    print(c)
154     return c
```

When writing existing or new code (not diffs), make sure to specify the language of the code. For example, if you were generating Python, you would write the following:

```python
# relative/path/file.py line: 1234 (the line number is optional, no leading slash in file path)
# a line of context right before the relevant code
<python code goes here>
# a line of context right after the relevant code
```

Now, here is the relevant context, each context piece is seperated by a line of dashes:
